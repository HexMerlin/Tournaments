@if (!string.IsNullOrEmpty(Response))
{
    <div class="api-response @(IsError ? "error" : "success")">
        <h4>@Title</h4>
        @if (IsJson && !IsError)
        {
            <div class="json-display">
                @((MarkupString)FormatJson(Response))
            </div>
        }
        else
        {
            <pre>@Response</pre>
        }
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the response message to display.
    /// </summary>
    [Parameter]
    public string? Response { get; set; }

    /// <summary>
    /// Gets or sets the title of the response display.
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "API Response";

    /// <summary>
    /// Gets or sets a value indicating whether the response is an error.
    /// </summary>
    [Parameter]
    public bool IsError { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the response is JSON.
    /// </summary>
    [Parameter]
    public bool IsJson { get; set; } = true;

    private string FormatJson(string json)
    {
        try
        {
            // Try to parse and format the JSON
            var options = new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            };
            
            var jsonElement = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(json);
            var formattedJson = System.Text.Json.JsonSerializer.Serialize(jsonElement, options);
            
            // Add syntax highlighting by wrapping property names and values
            formattedJson = formattedJson.Replace("\"", "");
            formattedJson = System.Text.RegularExpressions.Regex.Replace(
                formattedJson,
                @"^(\s*)(\w+)(:)",
                m => $"{m.Groups[1].Value}<span class=\"json-property\">{m.Groups[2].Value}</span>{m.Groups[3].Value}",
                System.Text.RegularExpressions.RegexOptions.Multiline
            );
            
            return formattedJson.Replace("\n", "<br>").Replace("  ", "&nbsp;&nbsp;");
        }
        catch
        {
            // If parsing fails, return the original JSON
            return json;
        }
    }
}

<style>
    .api-response {
        margin: 1rem 0;
        padding: 1rem;
        border-radius: 4px;
        font-family: monospace;
    }

    .api-response.success {
        background-color: rgba(0, 100, 0, 0.6);
        border: 1px solid rgba(173, 216, 230, 0.4);
        color: white;
    }

    .api-response.error {
        background-color: rgba(139, 0, 0, 0.6);
        border: 1px solid rgba(255, 204, 203, 0.4);
        color: white;
    }

    .api-response h4 {
        margin-top: 0;
        color: white;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
    }

    .api-response pre {
        white-space: pre-wrap;
        word-wrap: break-word;
        margin: 0;
    }

    .json-display {
        white-space: pre-wrap;
        word-wrap: break-word;
        margin: 0;
    }

    .json-property {
        color: #66ccff;
        font-weight: bold;
    }
</style> 