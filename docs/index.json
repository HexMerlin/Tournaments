{
  "Tournaments.Api.Controllers.HomeController.html": {
    "href": "Tournaments.Api.Controllers.HomeController.html",
    "title": "Class HomeController | Tournament Docs",
    "summary": "Class HomeController Provides API discovery endpoints for the Tournament Management Application. Inheritance object ControllerBase HomeController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Controllers Assembly: Tournaments.Api.dll Syntax [ApiController] public class HomeController : ControllerBase Methods | Edit this page View Source GetApiRoot() Entry point that provides links to all available resources and operations. Declaration [HttpGet(\"/api\")] [ProducesResponseType(200)] public ActionResult GetApiRoot() Returns Type Description ActionResult A JSON response with links to all available resources and operations. | Edit this page View Source RedirectToApiRoot() Redirects to the API discovery endpoint. Declaration [HttpGet(\"/\")] public ActionResult RedirectToApiRoot() Returns Type Description ActionResult A redirection to the API discovery endpoint."
  },
  "Tournaments.Api.Controllers.PlayersController.html": {
    "href": "Tournaments.Api.Controllers.PlayersController.html",
    "title": "Class PlayersController | Tournament Docs",
    "summary": "Class PlayersController Provides API endpoints for managing players in the Tournament Management Application. Inheritance object ControllerBase PlayersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Controllers Assembly: Tournaments.Api.dll Syntax [Route(\"api/[controller]\")] [ApiController] public class PlayersController : ControllerBase Constructors | Edit this page View Source PlayersController(TournamentsApiContext, ILogger<PlayersController>) Initializes a new instance of the PlayersController class. Declaration public PlayersController(TournamentsApiContext context, ILogger<PlayersController> logger) Parameters Type Name Description TournamentsApiContext context The database context. ILogger<PlayersController> logger The logger for this controller. Methods | Edit this page View Source DeletePlayer(string) Deletes a player by gamertag. Declaration [HttpDelete(\"{gamertag}\", Name = \"DeletePlayer\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> DeletePlayer(string gamertag) Parameters Type Name Description string gamertag The player's gamertag. Returns Type Description Task<IActionResult> No content. | Edit this page View Source GetPlayer(string) Gets a player by gamertag. Declaration [HttpGet(\"{gamertag}\", Name = \"GetPlayer\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<ResourcePlayer>> GetPlayer(string gamertag) Parameters Type Name Description string gamertag The player's gamertag. Returns Type Description Task<ActionResult<ResourcePlayer>> The player with hypermedia links. | Edit this page View Source GetPlayers() Gets all players. Declaration [HttpGet(Name = \"GetAllPlayers\")] [ProducesResponseType(200)] public Task<ActionResult<IEnumerable<ResourcePlayer>>> GetPlayers() Returns Type Description Task<ActionResult<IEnumerable<ResourcePlayer>>> A list of players with hypermedia links. | Edit this page View Source GetTournamentsForPlayer(string) Gets all tournaments a player is registered in. Declaration [HttpGet(\"{gamertag}/tournaments\", Name = \"GetTournamentsForPlayer\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<IEnumerable<ResourceTournament>>> GetTournamentsForPlayer(string gamertag) Parameters Type Name Description string gamertag The player's gamertag. Returns Type Description Task<ActionResult<IEnumerable<ResourceTournament>>> A list of tournaments with hypermedia links. | Edit this page View Source PostPlayer(Player) Creates a new player. Declaration [HttpPost(Name = \"CreatePlayer\")] [ProducesResponseType(201)] [ProducesResponseType(409)] public Task<ActionResult<ResourcePlayer>> PostPlayer(Player player) Parameters Type Name Description Player player The player data. Returns Type Description Task<ActionResult<ResourcePlayer>> The created player with hypermedia links. | Edit this page View Source PutPlayer(string, Player) Updates a player's details. Declaration [HttpPut(\"{gamertag}\", Name = \"UpdatePlayer\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] public Task<IActionResult> PutPlayer(string gamertag, Player player) Parameters Type Name Description string gamertag The player's gamertag. Player player The updated player data. Returns Type Description Task<IActionResult> No content."
  },
  "Tournaments.Api.Controllers.RegistrationsController.html": {
    "href": "Tournaments.Api.Controllers.RegistrationsController.html",
    "title": "Class RegistrationsController | Tournament Docs",
    "summary": "Class RegistrationsController Provides API endpoints for managing registrations in the Tournament Management Application. Inheritance object ControllerBase RegistrationsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Controllers Assembly: Tournaments.Api.dll Syntax [Route(\"api/[controller]\")] [ApiController] public class RegistrationsController : ControllerBase Remarks Initializes a new instance of the RegistrationsController class. Constructors | Edit this page View Source RegistrationsController(TournamentsApiContext) Provides API endpoints for managing registrations in the Tournament Management Application. Declaration public RegistrationsController(TournamentsApiContext context) Parameters Type Name Description TournamentsApiContext context The database context. Remarks Initializes a new instance of the RegistrationsController class. Methods | Edit this page View Source DeleteRegistration(int) Deletes a registration by ID. Declaration [HttpDelete(\"{id}\", Name = \"DeleteRegistrationById\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> DeleteRegistration(int id) Parameters Type Name Description int id The registration ID. Returns Type Description Task<IActionResult> No content. | Edit this page View Source DeleteRegistrationByTournamentAndPlayer(string, string) Deletes a registration by tournament name and player gamertag. Declaration [HttpDelete(\"/api/registrations/{tournamentName}/{gamertag}\", Name = \"DeleteRegistrationByTournamentAndPlayer\")] [ProducesResponseType(204)] [ProducesResponseType(404)] public Task<IActionResult> DeleteRegistrationByTournamentAndPlayer(string tournamentName, string gamertag) Parameters Type Name Description string tournamentName The name of the tournament. string gamertag The player's gamertag. Returns Type Description Task<IActionResult> No content. | Edit this page View Source GetPlayersInTournament(string) Gets all players registered in a tournament. Declaration [HttpGet(\"/api/tournaments/{tournamentName}/players\", Name = \"GetPlayersInTournament\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<IEnumerable<ResourcePlayer>>> GetPlayersInTournament(string tournamentName) Parameters Type Name Description string tournamentName The name of the tournament. Returns Type Description Task<ActionResult<IEnumerable<ResourcePlayer>>> A list of players with hypermedia links. | Edit this page View Source GetRegistration(int) Gets a registration by ID. Declaration [HttpGet(\"{id}\", Name = \"GetRegistrationById\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<ResourceRegistration>> GetRegistration(int id) Parameters Type Name Description int id The registration ID. Returns Type Description Task<ActionResult<ResourceRegistration>> The registration with hypermedia links. | Edit this page View Source GetRegistrationByTournamentAndPlayer(string, string) Gets a registration by tournament name and player gamertag. Declaration [HttpGet(\"/api/tournaments/{tournamentName}/players/{gamertag}\", Name = \"GetRegistrationByTournamentAndPlayer\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<ResourceRegistration>> GetRegistrationByTournamentAndPlayer(string tournamentName, string gamertag) Parameters Type Name Description string tournamentName The name of the tournament. string gamertag The player's gamertag. Returns Type Description Task<ActionResult<ResourceRegistration>> The registration with hypermedia links. | Edit this page View Source GetRegistrations() Gets all registrations. Declaration [HttpGet(Name = \"GetAllRegistrations\")] [ProducesResponseType(200)] public Task<ActionResult<IEnumerable<ResourceRegistration>>> GetRegistrations() Returns Type Description Task<ActionResult<IEnumerable<ResourceRegistration>>> A list of registrations with hypermedia links. | Edit this page View Source PostRegistration(string, string) Registers a player in a tournament. Declaration [HttpPost(\"/api/tournaments/{tournamentName}/players/{gamertag}\", Name = \"CreateRegistration\")] [ProducesResponseType(201)] [ProducesResponseType(400)] [ProducesResponseType(404)] [ProducesResponseType(409)] public Task<ActionResult<ResourceRegistration>> PostRegistration(string tournamentName, string gamertag) Parameters Type Name Description string tournamentName The name of the tournament. string gamertag The player's gamertag. Returns Type Description Task<ActionResult<ResourceRegistration>> The created registration with hypermedia links. | Edit this page View Source PutRegistration(int, Registration) Updates a registration. Declaration [HttpPut(\"{id}\", Name = \"UpdateRegistration\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] public Task<IActionResult> PutRegistration(int id, Registration registration) Parameters Type Name Description int id The registration ID. Registration registration The updated registration data. Returns Type Description Task<IActionResult> No content."
  },
  "Tournaments.Api.Controllers.TestUtilityController.html": {
    "href": "Tournaments.Api.Controllers.TestUtilityController.html",
    "title": "Class TestUtilityController | Tournament Docs",
    "summary": "Class TestUtilityController Provides utility endpoints for testing purposes in the Tournament Management Application. Inheritance object ControllerBase TestUtilityController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Controllers Assembly: Tournaments.Api.dll Syntax [Route(\"api/[controller]\")] [ApiController] public class TestUtilityController : ControllerBase Constructors | Edit this page View Source TestUtilityController(TournamentsApiContext, IWebHostEnvironment) Initializes a new instance of the TestUtilityController class. Declaration public TestUtilityController(TournamentsApiContext context, IWebHostEnvironment environment) Parameters Type Name Description TournamentsApiContext context The database context. IWebHostEnvironment environment The web host environment. Methods | Edit this page View Source GetApiStatus() Gets the status of the API without accessing the database. Declaration [HttpGet(\"api-status\")] [ProducesResponseType(200)] public ActionResult<object> GetApiStatus() Returns Type Description ActionResult<object> A simple status message. | Edit this page View Source GetDatabaseStatus() Gets the status of the database. Declaration [HttpGet(\"status\")] [ProducesResponseType(200)] [ProducesResponseType(500)] public Task<ActionResult<object>> GetDatabaseStatus() Returns Type Description Task<ActionResult<object>> Information about the database contents. | Edit this page View Source ResetDatabase() Resets the database by removing all players, tournaments, and registrations. Declaration [HttpPost(\"reset\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(500)] public Task<IActionResult> ResetDatabase() Returns Type Description Task<IActionResult> A status message indicating the result of the operation."
  },
  "Tournaments.Api.Controllers.TournamentsController.html": {
    "href": "Tournaments.Api.Controllers.TournamentsController.html",
    "title": "Class TournamentsController | Tournament Docs",
    "summary": "Class TournamentsController Provides API endpoints for managing tournaments in the Tournament Management Application. Inheritance object ControllerBase TournamentsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Controllers Assembly: Tournaments.Api.dll Syntax [Route(\"api/[controller]\")] [ApiController] public class TournamentsController : ControllerBase Constructors | Edit this page View Source TournamentsController(TournamentsApiContext) Initializes a new instance of the TournamentsController class. Declaration public TournamentsController(TournamentsApiContext context) Parameters Type Name Description TournamentsApiContext context The database context. Methods | Edit this page View Source DeleteTournament(string) Deletes a tournament by name. Declaration [HttpDelete(\"{name}\", Name = \"DeleteTournament\")] [ProducesResponseType(204)] [ProducesResponseType(404)] [ProducesResponseType(500)] public Task<IActionResult> DeleteTournament(string name) Parameters Type Name Description string name The name of the tournament. Returns Type Description Task<IActionResult> No content. | Edit this page View Source GetTournament(string, string?) Gets a tournament by name. Declaration [HttpGet(\"{name}\", Name = \"GetTournament\")] [ProducesResponseType(200)] [ProducesResponseType(404)] public Task<ActionResult<ResourceTournament>> GetTournament(string name, string? include = null) Parameters Type Name Description string name The name of the tournament. string include Optional query parameter to include sub-tournaments. Returns Type Description Task<ActionResult<ResourceTournament>> The tournament with hypermedia links. | Edit this page View Source GetTournaments() Gets all tournaments. Declaration [HttpGet(Name = \"GetAllTournaments\")] [ProducesResponseType(200)] public Task<ActionResult<IEnumerable<ResourceTournament>>> GetTournaments() Returns Type Description Task<ActionResult<IEnumerable<ResourceTournament>>> A list of tournaments with hypermedia links. | Edit this page View Source PostTournament(Tournament) Creates a new tournament. Declaration [HttpPost(Name = \"CreateTournament\")] [ProducesResponseType(201)] [ProducesResponseType(409)] [ProducesResponseType(400)] public Task<ActionResult<ResourceTournament>> PostTournament(Tournament tournament) Parameters Type Name Description Tournament tournament The tournament data. Returns Type Description Task<ActionResult<ResourceTournament>> The created tournament with hypermedia links. | Edit this page View Source PutTournament(string, Tournament) Updates a tournament's details. Declaration [HttpPut(\"{name}\", Name = \"UpdateTournament\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(404)] public Task<IActionResult> PutTournament(string name, Tournament tournament) Parameters Type Name Description string name The name of the tournament. Tournament tournament The updated tournament data. Returns Type Description Task<IActionResult> No content."
  },
  "Tournaments.Api.Controllers.html": {
    "href": "Tournaments.Api.Controllers.html",
    "title": "Namespace Tournaments.Api.Controllers | Tournament Docs",
    "summary": "Namespace Tournaments.Api.Controllers Classes HomeController Provides API discovery endpoints for the Tournament Management Application. PlayersController Provides API endpoints for managing players in the Tournament Management Application. RegistrationsController Provides API endpoints for managing registrations in the Tournament Management Application. TestUtilityController Provides utility endpoints for testing purposes in the Tournament Management Application. TournamentsController Provides API endpoints for managing tournaments in the Tournament Management Application."
  },
  "Tournaments.Api.Data.DesignTimeDbContextFactory.html": {
    "href": "Tournaments.Api.Data.DesignTimeDbContextFactory.html",
    "title": "Class DesignTimeDbContextFactory | Tournament Docs",
    "summary": "Class DesignTimeDbContextFactory Factory for creating DbContext instances at design time (for migrations). Inheritance object DesignTimeDbContextFactory Implements IDesignTimeDbContextFactory<TournamentsApiContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Data Assembly: Tournaments.Api.dll Syntax public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<TournamentsApiContext> Methods | Edit this page View Source CreateDbContext(string[]) Creates a new instance of the TournamentsApiContext for use with migrations. Declaration public TournamentsApiContext CreateDbContext(string[] args) Parameters Type Name Description string[] args Arguments provided by the design-time service. Returns Type Description TournamentsApiContext A new instance of TournamentsApiContext. Implements IDesignTimeDbContextFactory<TContext>"
  },
  "Tournaments.Api.Data.TournamentsApiContext.html": {
    "href": "Tournaments.Api.Data.TournamentsApiContext.html",
    "title": "Class TournamentsApiContext | Tournament Docs",
    "summary": "Class TournamentsApiContext Represents the database context for the Tournament Management Application. Inheritance object DbContext TournamentsApiContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Data Assembly: Tournaments.Api.dll Syntax public class TournamentsApiContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Constructors | Edit this page View Source TournamentsApiContext(DbContextOptions<TournamentsApiContext>) Initializes a new instance of the TournamentsApiContext class. Declaration public TournamentsApiContext(DbContextOptions<TournamentsApiContext> options) Parameters Type Name Description DbContextOptions<TournamentsApiContext> options The options to be used by the DbContext. Properties | Edit this page View Source Player Gets or sets the DbSet of players. Declaration public DbSet<Player> Player { get; set; } Property Value Type Description DbSet<Player> | Edit this page View Source Registration Gets or sets the DbSet of registrations. Declaration public DbSet<Registration> Registration { get; set; } Property Value Type Description DbSet<Registration> | Edit this page View Source Tournament Gets or sets the DbSet of tournaments. Declaration public DbSet<Tournament> Tournament { get; set; } Property Value Type Description DbSet<Tournament> Implements IInfrastructure<T> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable"
  },
  "Tournaments.Api.Data.html": {
    "href": "Tournaments.Api.Data.html",
    "title": "Namespace Tournaments.Api.Data | Tournament Docs",
    "summary": "Namespace Tournaments.Api.Data Classes DesignTimeDbContextFactory Factory for creating DbContext instances at design time (for migrations). TournamentsApiContext Represents the database context for the Tournament Management Application."
  },
  "Tournaments.Api.Migrations.InitialCreate.html": {
    "href": "Tournaments.Api.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | Tournament Docs",
    "summary": "Class InitialCreate A base class inherited by each EF Core migration. Inheritance object Migration InitialCreate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Migrations Assembly: Tournaments.Api.dll Syntax [DbContext(typeof(TournamentsApiContext))] [Migration(\"20250306105257_InitialCreate\")] public class InitialCreate : Migration Remarks See Database migrations for more information and examples. Methods | Edit this page View Source BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The ModelBuilder to use to build the model. Overrides Migration.BuildTargetModel(ModelBuilder) Remarks See Database migrations for more information and examples. | Edit this page View Source Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder The MigrationBuilder that will build the operations. Overrides Migration.Down(MigrationBuilder) Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. | Edit this page View Source Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder The MigrationBuilder that will build the operations. Overrides Migration.Up(MigrationBuilder) Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "Tournaments.Api.Migrations.html": {
    "href": "Tournaments.Api.Migrations.html",
    "title": "Namespace Tournaments.Api.Migrations | Tournament Docs",
    "summary": "Namespace Tournaments.Api.Migrations Classes InitialCreate A base class inherited by each EF Core migration."
  },
  "Tournaments.Api.Program.html": {
    "href": "Tournaments.Api.Program.html",
    "title": "Class Program | Tournament Docs",
    "summary": "Class Program Entry point for the Tournament Management Application. Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api Assembly: Tournaments.Api.dll Syntax public class Program Methods | Edit this page View Source Main(string[]) Main entry point for the application. Declaration public static void Main(string[] args) Parameters Type Name Description string[] args Command-line arguments."
  },
  "Tournaments.Api.Tests.DatabaseTests.html": {
    "href": "Tournaments.Api.Tests.DatabaseTests.html",
    "title": "Class DatabaseTests | Tournament Docs",
    "summary": "Class DatabaseTests Contains tests for verifying the database state and operations in the Tournament Management Application. Inheritance object DatabaseTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax [TestClass] public class DatabaseTests Methods | Edit this page View Source CheckInitialDatabaseStatus_ShouldBeEmpty() Verifies that the initial database status is empty. Declaration [TestMethod] public Task CheckInitialDatabaseStatus_ShouldBeEmpty() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source Init(TestContext) Initializes the test class. Declaration [ClassInitialize] public static void Init(TestContext _) Parameters Type Name Description TestContext _ The test context, not used in this method. | Edit this page View Source ResetDatabase_ShouldClearAllData() Verifies that resetting the database clears all data. Declaration [TestMethod] [DoNotParallelize] public Task ResetDatabase_ShouldClearAllData() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source TestSetup() Sets up the test by resetting the database. Declaration [TestInitialize] public void TestSetup() | Edit this page View Source VerifyDatabaseEmptyAfterReset() Verifies that the database is empty after a reset operation. Declaration [TestMethod] public Task VerifyDatabaseEmptyAfterReset() Returns Type Description Task A task representing the asynchronous operation."
  },
  "Tournaments.Api.Tests.HomeControllerTests.html": {
    "href": "Tournaments.Api.Tests.HomeControllerTests.html",
    "title": "Class HomeControllerTests | Tournament Docs",
    "summary": "Class HomeControllerTests Contains tests for verifying the HomeController endpoints in the Tournament Management Application. Inheritance object HomeControllerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax [TestClass] public class HomeControllerTests Methods | Edit this page View Source GetApiRoot_IsHateoasCompliant() Verifies that the API root endpoint is HATEOAS compliant. Declaration [TestMethod] public Task GetApiRoot_IsHateoasCompliant() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetApiRoot_LinksHaveCorrectFormat() Verifies that the links in the API root endpoint have the correct format. Declaration [TestMethod] public Task GetApiRoot_LinksHaveCorrectFormat() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetApiRoot_ShouldReturnSuccessWithLinks() Verifies that the API root endpoint returns success with the expected links. Declaration [TestMethod] public Task GetApiRoot_ShouldReturnSuccessWithLinks() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetRoot_ShouldRedirectToApiRoot() Verifies that the root endpoint redirects to the API root endpoint. Declaration [TestMethod] public Task GetRoot_ShouldRedirectToApiRoot() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source Init(TestContext) Initializes the test class by setting up the HTTP client. Declaration [ClassInitialize] public static void Init(TestContext _) Parameters Type Name Description TestContext _ The test context, not used in this method."
  },
  "Tournaments.Api.Tests.PlayerTests.html": {
    "href": "Tournaments.Api.Tests.PlayerTests.html",
    "title": "Class PlayerTests | Tournament Docs",
    "summary": "Class PlayerTests Contains tests for verifying the Player endpoints in the Tournament Management Application. Inheritance object PlayerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax [TestClass] public class PlayerTests Methods | Edit this page View Source CreateDuplicatePlayer_ShouldReturn409Conflict() Verifies that creating a duplicate player returns a 409 Conflict status. Declaration [TestMethod] [DoNotParallelize] public Task CreateDuplicatePlayer_ShouldReturn409Conflict() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source CreatePlayer_ShouldReturn201() Verifies that creating a player returns a 201 Created status. Declaration [TestMethod] public Task CreatePlayer_ShouldReturn201() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source DeletePlayer_ShouldRemovePlayer() Verifies that deleting a player removes the player data. Declaration [TestMethod] [DoNotParallelize] public Task DeletePlayer_ShouldRemovePlayer() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayer_ShouldReturnPlayer() Verifies that retrieving a player returns the expected player data. Declaration [TestMethod] [DoNotParallelize] public Task GetPlayer_ShouldReturnPlayer() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source Init(TestContext) Initializes the test class by setting up the HTTP client. Declaration [ClassInitialize] public static void Init(TestContext _) Parameters Type Name Description TestContext _ The test context, not used in this method. | Edit this page View Source SetUp() Sets up the test by resetting the database. Declaration [TestInitialize] public Task SetUp() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source UpdatePlayer_ShouldModifyPlayer() Verifies that updating a player modifies the player data. Declaration [TestMethod] public Task UpdatePlayer_ShouldModifyPlayer() Returns Type Description Task A task representing the asynchronous operation."
  },
  "Tournaments.Api.Tests.RegistrationPlayersInTournamentTests.html": {
    "href": "Tournaments.Api.Tests.RegistrationPlayersInTournamentTests.html",
    "title": "Class RegistrationPlayersInTournamentTests | Tournament Docs",
    "summary": "Class RegistrationPlayersInTournamentTests Contains tests for verifying the registration of players in tournaments in the Tournament Management Application. Inheritance object RegistrationPlayersInTournamentTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax [TestClass] public class RegistrationPlayersInTournamentTests Methods | Edit this page View Source GetPlayersInTournament_ShouldHaveCorrectLinks() Verifies that the links in the response for getting players in a tournament have the correct format. Declaration [TestMethod] [DoNotParallelize] public Task GetPlayersInTournament_ShouldHaveCorrectLinks() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayersInTournament_ShouldReturnAllPlayers() Verifies that getting players in a tournament returns all registered players. Declaration [TestMethod] [DoNotParallelize] public Task GetPlayersInTournament_ShouldReturnAllPlayers() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayersInTournament_WithEmptyTournament_ShouldReturnEmptyCollection() Verifies that getting players in an empty tournament returns an empty collection. Declaration [TestMethod] [DoNotParallelize] public Task GetPlayersInTournament_WithEmptyTournament_ShouldReturnEmptyCollection() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayersInTournament_WithNonexistentTournament_ShouldReturn404() Verifies that getting players in a nonexistent tournament returns a 404 Not Found status. Declaration [TestMethod] [DoNotParallelize] public Task GetPlayersInTournament_WithNonexistentTournament_ShouldReturn404() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayersInTournament_WithParentChildTournaments_ShouldReturnCorrectPlayers() Verifies that getting players in a parent-child tournament structure returns the correct players. Declaration [TestMethod] [DoNotParallelize] public Task GetPlayersInTournament_WithParentChildTournaments_ShouldReturnCorrectPlayers() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source Init(TestContext) Initializes the test class by setting up the HTTP client. Declaration [ClassInitialize] public static void Init(TestContext _) Parameters Type Name Description TestContext _ The test context, not used in this method. | Edit this page View Source SetUp() Sets up the test by resetting the database. Declaration [TestInitialize] public Task SetUp() Returns Type Description Task A task representing the asynchronous operation."
  },
  "Tournaments.Api.Tests.RegistrationTests.html": {
    "href": "Tournaments.Api.Tests.RegistrationTests.html",
    "title": "Class RegistrationTests | Tournament Docs",
    "summary": "Class RegistrationTests Contains tests for verifying the registration endpoints in the Tournament Management Application. Inheritance object RegistrationTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax [TestClass] public class RegistrationTests Methods | Edit this page View Source GetRegistrationDetails_ShouldReturnRegistration() Verifies that retrieving registration details returns the expected registration data. Declaration [TestMethod] public Task GetRegistrationDetails_ShouldReturnRegistration() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetRegistrationForNonExistentPlayer_ShouldReturn404NotFound() Verifies that getting registration details for a non-existent player returns a 404 Not Found status. Declaration [TestMethod] [DoNotParallelize] public Task GetRegistrationForNonExistentPlayer_ShouldReturn404NotFound() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetRegistrationForNonExistentTournament_ShouldReturn404NotFound() Verifies that getting registration details for a non-existent tournament returns a 404 Not Found status. Declaration [TestMethod] [DoNotParallelize] public Task GetRegistrationForNonExistentTournament_ShouldReturn404NotFound() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source Init(TestContext) Initializes the test class by setting up the HTTP client. Declaration [ClassInitialize] public static void Init(TestContext _) Parameters Type Name Description TestContext _ The test context, not used in this method. | Edit this page View Source RegisterDuplicatePlayerInTournament_ShouldReturn409Conflict() Verifies that registering a duplicate player in a tournament returns a 409 Conflict status. Declaration [TestMethod] [DoNotParallelize] public Task RegisterDuplicatePlayerInTournament_ShouldReturn409Conflict() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source RegisterPlayerInSubTournament_ShouldRequireParentRegistration() Verifies that registering a player in a sub-tournament requires registration in the parent tournament. Declaration [TestMethod] [DoNotParallelize] public Task RegisterPlayerInSubTournament_ShouldRequireParentRegistration() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source RegisterPlayerInTournament_ShouldReturn201() Verifies that registering a player in a tournament returns a 201 Created status. Declaration [TestMethod] [DoNotParallelize] public Task RegisterPlayerInTournament_ShouldReturn201() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source RemovePlayerFromTournament_ShouldCascadeToSubTournaments() Verifies that removing a player from a tournament cascades to sub-tournaments. Declaration [TestMethod] [DoNotParallelize] public Task RemovePlayerFromTournament_ShouldCascadeToSubTournaments() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source RemovePlayerFromTournament_ShouldReturn204NoContent() Verifies that removing a player from a tournament returns a 204 No Content status. Declaration [TestMethod] [DoNotParallelize] public Task RemovePlayerFromTournament_ShouldReturn204NoContent() Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source SetUp() Sets up the test by resetting the database. Declaration [TestInitialize] public Task SetUp() Returns Type Description Task A task representing the asynchronous operation."
  },
  "Tournaments.Api.Tests.ResourceHelper.html": {
    "href": "Tournaments.Api.Tests.ResourceHelper.html",
    "title": "Class ResourceHelper | Tournament Docs",
    "summary": "Class ResourceHelper Provides helper methods for validating hypermedia links in resources. Inheritance object ResourceHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax public static class ResourceHelper Methods | Edit this page View Source AssertHasLink(List<Link>, string, string, string) Validates that a resource contains the expected hypermedia links. Declaration public static void AssertHasLink(List<Link> links, string rel, string expectedHref, string expectedMethod) Parameters Type Name Description List<Link> links The list of links to validate. string rel The relation of the expected link. string expectedHref The expected href of the link. string expectedMethod The expected method of the link. | Edit this page View Source AssertJsonElementHasLink(JsonElement, string, string, string) Validates that a JSON element contains the expected hypermedia link. Declaration public static void AssertJsonElementHasLink(JsonElement linksElement, string rel, string expectedHref, string expectedMethod) Parameters Type Name Description JsonElement linksElement The JSON element containing the links. string rel The relation of the expected link. string expectedHref The expected href of the link. string expectedMethod The expected method of the link. | Edit this page View Source AssertPlayerLinks(ResourcePlayer, string) Validates that a ResourcePlayer contains the expected hypermedia links. Declaration public static void AssertPlayerLinks(ResourcePlayer resource, string expectedGamertag) Parameters Type Name Description ResourcePlayer resource The resource to validate. string expectedGamertag The expected gamertag of the player. | Edit this page View Source AssertRegistrationLinks(ResourceRegistration, string, string) Validates that a ResourceRegistration contains the expected hypermedia links. Declaration public static void AssertRegistrationLinks(ResourceRegistration resource, string expectedTournamentName, string expectedPlayerTag) Parameters Type Name Description ResourceRegistration resource The resource to validate. string expectedTournamentName The expected name of the tournament. string expectedPlayerTag The expected gamertag of the player. | Edit this page View Source AssertTournamentLinks(ResourceTournament, string) Validates that a ResourceTournament contains the expected hypermedia links. Declaration public static void AssertTournamentLinks(ResourceTournament resource, string expectedTournamentName) Parameters Type Name Description ResourceTournament resource The resource to validate. string expectedTournamentName The expected name of the tournament."
  },
  "Tournaments.Api.Tests.TournamentTests.html": {
    "href": "Tournaments.Api.Tests.TournamentTests.html",
    "title": "Class TournamentTests | Tournament Docs",
    "summary": "Class TournamentTests Inheritance object TournamentTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax [TestClass] public class TournamentTests Methods | Edit this page View Source CreateDuplicateTournament_ShouldReturn409Conflict() Declaration [TestMethod] [DoNotParallelize] public Task CreateDuplicateTournament_ShouldReturn409Conflict() Returns Type Description Task | Edit this page View Source CreateNestedSubTournament_ShouldReturn201() Declaration [TestMethod] public Task CreateNestedSubTournament_ShouldReturn201() Returns Type Description Task | Edit this page View Source CreateSubTournament_ShouldReturn201() Declaration [TestMethod] public Task CreateSubTournament_ShouldReturn201() Returns Type Description Task | Edit this page View Source CreateTournamentExceedingNestingLimit_ShouldReturn400BadRequest() Declaration [TestMethod] [DoNotParallelize] public Task CreateTournamentExceedingNestingLimit_ShouldReturn400BadRequest() Returns Type Description Task | Edit this page View Source CreateTournament_ShouldReturn201() Declaration [TestMethod] public Task CreateTournament_ShouldReturn201() Returns Type Description Task | Edit this page View Source DeleteTournament_ShouldRemoveTournament() Declaration [TestMethod] [DoNotParallelize] public Task DeleteTournament_ShouldRemoveTournament() Returns Type Description Task | Edit this page View Source DeleteTournament_ShouldRemoveTournamentAndSubTournaments() Declaration [TestMethod] [DoNotParallelize] public Task DeleteTournament_ShouldRemoveTournamentAndSubTournaments() Returns Type Description Task | Edit this page View Source GetTournamentWithSubTournaments_ShouldIncludeSubTournaments() Declaration [TestMethod] [DoNotParallelize] public Task GetTournamentWithSubTournaments_ShouldIncludeSubTournaments() Returns Type Description Task | Edit this page View Source GetTournament_ShouldReturnTournament() Declaration [TestMethod] [DoNotParallelize] public Task GetTournament_ShouldReturnTournament() Returns Type Description Task | Edit this page View Source Init(TestContext) Declaration [ClassInitialize] public static void Init(TestContext _) Parameters Type Name Description TestContext _ | Edit this page View Source SetUp() Declaration [TestInitialize] public Task SetUp() Returns Type Description Task | Edit this page View Source UpdateTournament_ShouldModifyTournament() Declaration [TestMethod] public Task UpdateTournament_ShouldModifyTournament() Returns Type Description Task"
  },
  "Tournaments.Api.Tests.TournamentsApiTestFixture.html": {
    "href": "Tournaments.Api.Tests.TournamentsApiTestFixture.html",
    "title": "Class TournamentsApiTestFixture | Tournament Docs",
    "summary": "Class TournamentsApiTestFixture Provides a test fixture for the Tournament Management Application API, using an in-memory database. Inheritance object WebApplicationFactory<Program> TournamentsApiTestFixture Implements IAsyncDisposable IDisposable Inherited Members WebApplicationFactory<Program>.WithWebHostBuilder(Action<IWebHostBuilder>) WebApplicationFactory<Program>.GetTestAssemblies() WebApplicationFactory<Program>.CreateHostBuilder() WebApplicationFactory<Program>.CreateWebHostBuilder() WebApplicationFactory<Program>.CreateServer(IWebHostBuilder) WebApplicationFactory<Program>.CreateHost(IHostBuilder) WebApplicationFactory<Program>.CreateClient() WebApplicationFactory<Program>.CreateClient(WebApplicationFactoryClientOptions) WebApplicationFactory<Program>.CreateDefaultClient(params DelegatingHandler[]) WebApplicationFactory<Program>.ConfigureClient(HttpClient) WebApplicationFactory<Program>.CreateDefaultClient(Uri, params DelegatingHandler[]) WebApplicationFactory<Program>.Dispose() WebApplicationFactory<Program>.Dispose(bool) WebApplicationFactory<Program>.DisposeAsync() WebApplicationFactory<Program>.Server WebApplicationFactory<Program>.Services WebApplicationFactory<Program>.Factories WebApplicationFactory<Program>.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Api.Tests Assembly: Tournaments.Api.Tests.dll Syntax public class TournamentsApiTestFixture : WebApplicationFactory<Program>, IAsyncDisposable, IDisposable Constructors | Edit this page View Source TournamentsApiTestFixture() Initializes a new instance of the TournamentsApiTestFixture class. Declaration public TournamentsApiTestFixture() Properties | Edit this page View Source Client Declaration public HttpClient Client { get; } Property Value Type Description HttpClient Methods | Edit this page View Source ConfigureWebHost(IWebHostBuilder) Configures the web host for the test fixture. Declaration protected override void ConfigureWebHost(IWebHostBuilder builder) Parameters Type Name Description IWebHostBuilder builder The web host builder. Overrides WebApplicationFactory<Program>.ConfigureWebHost(IWebHostBuilder) | Edit this page View Source ResetDatabase() Resets the database by clearing all tables. Declaration public void ResetDatabase() Implements IAsyncDisposable IDisposable"
  },
  "Tournaments.Api.Tests.html": {
    "href": "Tournaments.Api.Tests.html",
    "title": "Namespace Tournaments.Api.Tests | Tournament Docs",
    "summary": "Namespace Tournaments.Api.Tests Classes DatabaseTests Contains tests for verifying the database state and operations in the Tournament Management Application. HomeControllerTests Contains tests for verifying the HomeController endpoints in the Tournament Management Application. PlayerTests Contains tests for verifying the Player endpoints in the Tournament Management Application. RegistrationPlayersInTournamentTests Contains tests for verifying the registration of players in tournaments in the Tournament Management Application. RegistrationTests Contains tests for verifying the registration endpoints in the Tournament Management Application. ResourceHelper Provides helper methods for validating hypermedia links in resources. TournamentTests TournamentsApiTestFixture Provides a test fixture for the Tournament Management Application API, using an in-memory database."
  },
  "Tournaments.Api.html": {
    "href": "Tournaments.Api.html",
    "title": "Namespace Tournaments.Api | Tournament Docs",
    "summary": "Namespace Tournaments.Api Classes Program Entry point for the Tournament Management Application."
  },
  "Tournaments.Shared.Hateoas.Link.html": {
    "href": "Tournaments.Shared.Hateoas.Link.html",
    "title": "Class Link | Tournament Docs",
    "summary": "Class Link Represents a hypermedia link used in HATEOAS. Inheritance object Link Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Hateoas Assembly: Tournaments.Shared.dll Syntax public class Link Constructors | Edit this page View Source Link(string, string, string) Initializes a new instance of the Link class. Declaration public Link(string href, string rel, string method) Parameters Type Name Description string href The URL of the link. string rel The relationship of the link. string method The HTTP method of the link. Properties | Edit this page View Source Href Gets or sets the URL of the link. Declaration public string Href { get; set; } Property Value Type Description string | Edit this page View Source Method Gets or sets the HTTP method of the link. Declaration public string Method { get; set; } Property Value Type Description string | Edit this page View Source Rel Gets or sets the relationship of the link. Declaration public string Rel { get; set; } Property Value Type Description string"
  },
  "Tournaments.Shared.Hateoas.Resource-1.html": {
    "href": "Tournaments.Shared.Hateoas.Resource-1.html",
    "title": "Class Resource<T> | Tournament Docs",
    "summary": "Class Resource<T> Represents a resource wrapper with hypermedia links for HATEOAS. Inheritance object Resource<T> ResourcePlayer ResourceRegistration ResourceTournament Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Hateoas Assembly: Tournaments.Shared.dll Syntax public class Resource<T> where T : class Type Parameters Name Description T The type of the resource data. Constructors | Edit this page View Source Resource() Initializes a new instance of the Resource<T> class. Declaration public Resource() | Edit this page View Source Resource(T) Initializes a new instance of the Resource<T> class with the specified data. Declaration public Resource(T data) Parameters Type Name Description T data The resource data. Properties | Edit this page View Source Data Gets or sets the resource data. Declaration public T Data { get; set; } Property Value Type Description T | Edit this page View Source Links Gets or sets the list of hypermedia links. Declaration public List<Link> Links { get; set; } Property Value Type Description List<Link>"
  },
  "Tournaments.Shared.Hateoas.ResourcePlayer.html": {
    "href": "Tournaments.Shared.Hateoas.ResourcePlayer.html",
    "title": "Class ResourcePlayer | Tournament Docs",
    "summary": "Class ResourcePlayer Represents a player resource wrapper with hypermedia links for HATEOAS. Inheritance object Resource<Player> ResourcePlayer Inherited Members Resource<Player>.Data Resource<Player>.Links object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Hateoas Assembly: Tournaments.Shared.dll Syntax public class ResourcePlayer : Resource<Player> Constructors | Edit this page View Source ResourcePlayer() Initializes a new instance of the ResourcePlayer class. Declaration public ResourcePlayer() | Edit this page View Source ResourcePlayer(Player) Initializes a new instance of the ResourcePlayer class with the specified player data. Declaration public ResourcePlayer(Player player) Parameters Type Name Description Player player The player data."
  },
  "Tournaments.Shared.Hateoas.ResourceRegistration.html": {
    "href": "Tournaments.Shared.Hateoas.ResourceRegistration.html",
    "title": "Class ResourceRegistration | Tournament Docs",
    "summary": "Class ResourceRegistration Represents a registration resource wrapper with hypermedia links for HATEOAS. Inheritance object Resource<Registration> ResourceRegistration Inherited Members Resource<Registration>.Data Resource<Registration>.Links object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Hateoas Assembly: Tournaments.Shared.dll Syntax public class ResourceRegistration : Resource<Registration> Constructors | Edit this page View Source ResourceRegistration() Initializes a new instance of the ResourceRegistration class. Declaration public ResourceRegistration() | Edit this page View Source ResourceRegistration(Registration) Initializes a new instance of the ResourceRegistration class with the specified registration data. Declaration public ResourceRegistration(Registration registration) Parameters Type Name Description Registration registration The registration data."
  },
  "Tournaments.Shared.Hateoas.ResourceTournament.html": {
    "href": "Tournaments.Shared.Hateoas.ResourceTournament.html",
    "title": "Class ResourceTournament | Tournament Docs",
    "summary": "Class ResourceTournament Represents a tournament resource wrapper with hypermedia links for HATEOAS. Inheritance object Resource<Tournament> ResourceTournament Inherited Members Resource<Tournament>.Data Resource<Tournament>.Links object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Hateoas Assembly: Tournaments.Shared.dll Syntax public class ResourceTournament : Resource<Tournament> Constructors | Edit this page View Source ResourceTournament() Initializes a new instance of the ResourceTournament class. Declaration public ResourceTournament() | Edit this page View Source ResourceTournament(Tournament) Initializes a new instance of the ResourceTournament class with the specified tournament data. Declaration public ResourceTournament(Tournament tournament) Parameters Type Name Description Tournament tournament The tournament data."
  },
  "Tournaments.Shared.Hateoas.html": {
    "href": "Tournaments.Shared.Hateoas.html",
    "title": "Namespace Tournaments.Shared.Hateoas | Tournament Docs",
    "summary": "Namespace Tournaments.Shared.Hateoas Classes Link Represents a hypermedia link used in HATEOAS. ResourcePlayer Represents a player resource wrapper with hypermedia links for HATEOAS. ResourceRegistration Represents a registration resource wrapper with hypermedia links for HATEOAS. ResourceTournament Represents a tournament resource wrapper with hypermedia links for HATEOAS. Resource<T> Represents a resource wrapper with hypermedia links for HATEOAS."
  },
  "Tournaments.Shared.Models.Player.html": {
    "href": "Tournaments.Shared.Models.Player.html",
    "title": "Class Player | Tournament Docs",
    "summary": "Class Player Represents a player participating in tournaments. Inheritance object Player Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Models Assembly: Tournaments.Shared.dll Syntax public class Player Properties | Edit this page View Source Age Gets or sets the age of the player. Declaration [Range(1, 200)] public int Age { get; set; } Property Value Type Description int | Edit this page View Source Gamertag Gets or sets the unique gamertag of the player. Declaration [Key] public required string Gamertag { get; set; } Property Value Type Description string | Edit this page View Source Name Gets or sets the name of the player. Declaration public required string Name { get; set; } Property Value Type Description string | Edit this page View Source Registrations Gets or sets the registrations of the player. Declaration [JsonIgnore] public ICollection<Registration> Registrations { get; set; } Property Value Type Description ICollection<Registration>"
  },
  "Tournaments.Shared.Models.Registration.html": {
    "href": "Tournaments.Shared.Models.Registration.html",
    "title": "Class Registration | Tournament Docs",
    "summary": "Class Registration Represents the registration of a player in a tournament. Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Models Assembly: Tournaments.Shared.dll Syntax public class Registration Properties | Edit this page View Source Id Gets or sets the unique identifier for the registration. Declaration [Key] public int Id { get; set; } Property Value Type Description int | Edit this page View Source Player Gets or sets the player associated with the registration. Declaration [ForeignKey(\"PlayerGamertag\")] [JsonIgnore] public Player Player { get; set; } Property Value Type Description Player | Edit this page View Source PlayerGamertag Gets or sets the gamertag of the player. Declaration public required string PlayerGamertag { get; set; } Property Value Type Description string | Edit this page View Source Tournament Gets or sets the tournament associated with the registration. Declaration [ForeignKey(\"TournamentName\")] [JsonIgnore] public Tournament Tournament { get; set; } Property Value Type Description Tournament | Edit this page View Source TournamentName Gets or sets the name of the tournament. Declaration public required string TournamentName { get; set; } Property Value Type Description string"
  },
  "Tournaments.Shared.Models.Tournament.html": {
    "href": "Tournaments.Shared.Models.Tournament.html",
    "title": "Class Tournament | Tournament Docs",
    "summary": "Class Tournament Represents a tournament in the Tournament Management Application. Inheritance object Tournament Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Shared.Models Assembly: Tournaments.Shared.dll Syntax public class Tournament Properties | Edit this page View Source Name Gets or sets the unique name of the tournament. Declaration [Key] public required string Name { get; set; } Property Value Type Description string | Edit this page View Source ParentTournament Gets or sets the parent tournament. Declaration [ForeignKey(\"ParentTournamentName\")] [JsonIgnore] public Tournament? ParentTournament { get; set; } Property Value Type Description Tournament | Edit this page View Source ParentTournamentName Gets or sets the name of the parent tournament, if any. Declaration public string? ParentTournamentName { get; set; } Property Value Type Description string | Edit this page View Source Registrations Gets or sets the registrations for this tournament. Declaration [JsonIgnore] public ICollection<Registration> Registrations { get; set; } Property Value Type Description ICollection<Registration> | Edit this page View Source SubTournaments Gets or sets the sub-tournaments of this tournament. Declaration public ICollection<Tournament> SubTournaments { get; set; } Property Value Type Description ICollection<Tournament>"
  },
  "Tournaments.Shared.Models.html": {
    "href": "Tournaments.Shared.Models.html",
    "title": "Namespace Tournaments.Shared.Models | Tournament Docs",
    "summary": "Namespace Tournaments.Shared.Models Classes Player Represents a player participating in tournaments. Registration Represents the registration of a player in a tournament. Tournament Represents a tournament in the Tournament Management Application."
  },
  "Tournaments.Web.Program.html": {
    "href": "Tournaments.Web.Program.html",
    "title": "Class Program | Tournament Docs",
    "summary": "Class Program The main entry point for the Tournaments Web application. Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Web Assembly: Tournaments.Web.dll Syntax public class Program Methods | Edit this page View Source Main(string[]) The main method which configures and runs the Blazor WebAssembly application. Declaration public static Task Main(string[] args) Parameters Type Name Description string[] args The command-line arguments. Returns Type Description Task"
  },
  "Tournaments.Web.Services.ApiStatusService.html": {
    "href": "Tournaments.Web.Services.ApiStatusService.html",
    "title": "Class ApiStatusService | Tournament Docs",
    "summary": "Class ApiStatusService Implementation of the IApiStatusService interface. Inheritance object ApiStatusService Implements IApiStatusService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public class ApiStatusService : IApiStatusService Constructors | Edit this page View Source ApiStatusService(HttpClient) Initializes a new instance of the ApiStatusService class. Declaration public ApiStatusService(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. Methods | Edit this page View Source GetDatabaseStatusAsync() Gets the current status of the database. Declaration public Task<string> GetDatabaseStatusAsync() Returns Type Description Task<string> A string representing the database status. | Edit this page View Source GetStatusAsync() Gets the current status of the API. Declaration public Task<string> GetStatusAsync() Returns Type Description Task<string> A string representing the API status. | Edit this page View Source ResetDatabaseAsync() Resets the database to a clean state. Declaration public Task<string> ResetDatabaseAsync() Returns Type Description Task<string> A string representing the result of the reset operation. Implements IApiStatusService"
  },
  "Tournaments.Web.Services.IApiStatusService.html": {
    "href": "Tournaments.Web.Services.IApiStatusService.html",
    "title": "Interface IApiStatusService | Tournament Docs",
    "summary": "Interface IApiStatusService Interface for API status-related operations. Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public interface IApiStatusService Methods | Edit this page View Source GetDatabaseStatusAsync() Gets the current status of the database. Declaration Task<string> GetDatabaseStatusAsync() Returns Type Description Task<string> A string representing the database status. | Edit this page View Source GetStatusAsync() Gets the current status of the API. Declaration Task<string> GetStatusAsync() Returns Type Description Task<string> A string representing the API status. | Edit this page View Source ResetDatabaseAsync() Resets the database to a clean state. Declaration Task<string> ResetDatabaseAsync() Returns Type Description Task<string> A string representing the result of the reset operation."
  },
  "Tournaments.Web.Services.IPlayerService.html": {
    "href": "Tournaments.Web.Services.IPlayerService.html",
    "title": "Interface IPlayerService | Tournament Docs",
    "summary": "Interface IPlayerService Interface for player-related operations. Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public interface IPlayerService Methods | Edit this page View Source CreatePlayerAsync(Player) Creates a new player. Declaration Task<Player> CreatePlayerAsync(Player player) Parameters Type Name Description Player player The player to create. Returns Type Description Task<Player> The created player. | Edit this page View Source DeletePlayerAsync(string) Deletes a player. Declaration Task DeletePlayerAsync(string gamertag) Parameters Type Name Description string gamertag The gamertag of the player to delete. Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayerAsync(string) Gets a player by gamertag. Declaration Task<Player> GetPlayerAsync(string gamertag) Parameters Type Name Description string gamertag The gamertag of the player. Returns Type Description Task<Player> The player with the specified gamertag. | Edit this page View Source GetPlayersAsync() Gets all players. Declaration Task<IEnumerable<Player>> GetPlayersAsync() Returns Type Description Task<IEnumerable<Player>> A collection of players. | Edit this page View Source UpdatePlayerAsync(string, Player) Updates a player. Declaration Task<Player> UpdatePlayerAsync(string gamertag, Player player) Parameters Type Name Description string gamertag The gamertag of the player to update. Player player The updated player information. Returns Type Description Task<Player> The updated player."
  },
  "Tournaments.Web.Services.IRegistrationService.html": {
    "href": "Tournaments.Web.Services.IRegistrationService.html",
    "title": "Interface IRegistrationService | Tournament Docs",
    "summary": "Interface IRegistrationService Interface for registration-related operations. Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public interface IRegistrationService Methods | Edit this page View Source GetPlayersForTournamentHierarchyAsync(IEnumerable<Tournament>) Gets players for each tournament in a hierarchy. Declaration Task<Dictionary<string, IEnumerable<Player>>> GetPlayersForTournamentHierarchyAsync(IEnumerable<Tournament> tournaments) Parameters Type Name Description IEnumerable<Tournament> tournaments The collection of tournaments. Returns Type Description Task<Dictionary<string, IEnumerable<Player>>> A dictionary mapping tournament names to their registered players. | Edit this page View Source GetPlayersInTournamentAsync(string) Gets all players registered in a tournament. Declaration Task<IEnumerable<Player>> GetPlayersInTournamentAsync(string tournamentName) Parameters Type Name Description string tournamentName The name of the tournament. Returns Type Description Task<IEnumerable<Player>> A collection of players registered in the tournament. | Edit this page View Source GetRegistrationAsync(string, string) Gets a registration by tournament name and player gamertag. Declaration Task<Registration> GetRegistrationAsync(string tournamentName, string playerGamertag) Parameters Type Name Description string tournamentName The name of the tournament. string playerGamertag The gamertag of the player. Returns Type Description Task<Registration> The registration. | Edit this page View Source GetTournamentsForPlayerAsync(string) Gets all tournaments a player is registered in. Declaration Task<IEnumerable<Tournament>> GetTournamentsForPlayerAsync(string playerGamertag) Parameters Type Name Description string playerGamertag The gamertag of the player. Returns Type Description Task<IEnumerable<Tournament>> A collection of tournaments the player is registered in. | Edit this page View Source RegisterPlayerAsync(string, string) Registers a player in a tournament. Declaration Task<Registration> RegisterPlayerAsync(string tournamentName, string playerGamertag) Parameters Type Name Description string tournamentName The name of the tournament. string playerGamertag The gamertag of the player. Returns Type Description Task<Registration> The created registration. | Edit this page View Source RemovePlayerFromTournamentAsync(string, string) Removes a player from a tournament. Declaration Task RemovePlayerFromTournamentAsync(string tournamentName, string playerGamertag) Parameters Type Name Description string tournamentName The name of the tournament. string playerGamertag The gamertag of the player. Returns Type Description Task A task representing the asynchronous operation."
  },
  "Tournaments.Web.Services.ITournamentService.html": {
    "href": "Tournaments.Web.Services.ITournamentService.html",
    "title": "Interface ITournamentService | Tournament Docs",
    "summary": "Interface ITournamentService Interface for tournament-related operations. Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public interface ITournamentService Methods | Edit this page View Source CreateTournamentAsync(Tournament) Creates a new tournament. Declaration Task<Tournament> CreateTournamentAsync(Tournament tournament) Parameters Type Name Description Tournament tournament The tournament to create. Returns Type Description Task<Tournament> The created tournament. | Edit this page View Source DeleteTournamentAsync(string) Deletes a tournament. Declaration Task DeleteTournamentAsync(string name) Parameters Type Name Description string name The name of the tournament to delete. Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetAllTournamentsWithHierarchyAsync() Gets all root tournaments with their complete hierarchy of sub-tournaments. Declaration Task<IEnumerable<Tournament>> GetAllTournamentsWithHierarchyAsync() Returns Type Description Task<IEnumerable<Tournament>> A collection of root tournaments with their sub-tournament hierarchies. | Edit this page View Source GetTournamentAsync(string, bool) Gets a tournament by name. Declaration Task<Tournament> GetTournamentAsync(string name, bool includeSubTournaments = false) Parameters Type Name Description string name The name of the tournament. bool includeSubTournaments Whether to include sub-tournaments. Returns Type Description Task<Tournament> The tournament with the specified name. | Edit this page View Source GetTournamentsAsync() Gets all tournaments. Declaration Task<IEnumerable<Tournament>> GetTournamentsAsync() Returns Type Description Task<IEnumerable<Tournament>> A collection of tournaments. | Edit this page View Source UpdateTournamentAsync(string, Tournament) Updates a tournament. Declaration Task<Tournament> UpdateTournamentAsync(string name, Tournament tournament) Parameters Type Name Description string name The name of the tournament to update. Tournament tournament The updated tournament information. Returns Type Description Task<Tournament> The updated tournament."
  },
  "Tournaments.Web.Services.PlayerService.html": {
    "href": "Tournaments.Web.Services.PlayerService.html",
    "title": "Class PlayerService | Tournament Docs",
    "summary": "Class PlayerService Implementation of the IPlayerService interface. Inheritance object PlayerService Implements IPlayerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public class PlayerService : IPlayerService Constructors | Edit this page View Source PlayerService(HttpClient) Initializes a new instance of the PlayerService class. Declaration public PlayerService(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. Methods | Edit this page View Source CreatePlayerAsync(Player) Creates a new player. Declaration public Task<Player> CreatePlayerAsync(Player player) Parameters Type Name Description Player player The player to create. Returns Type Description Task<Player> The created player. | Edit this page View Source DeletePlayerAsync(string) Deletes a player. Declaration public Task DeletePlayerAsync(string gamertag) Parameters Type Name Description string gamertag The gamertag of the player to delete. Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetPlayerAsync(string) Gets a player by gamertag. Declaration public Task<Player> GetPlayerAsync(string gamertag) Parameters Type Name Description string gamertag The gamertag of the player. Returns Type Description Task<Player> The player with the specified gamertag. | Edit this page View Source GetPlayersAsync() Gets all players. Declaration public Task<IEnumerable<Player>> GetPlayersAsync() Returns Type Description Task<IEnumerable<Player>> A collection of players. | Edit this page View Source UpdatePlayerAsync(string, Player) Updates a player. Declaration public Task<Player> UpdatePlayerAsync(string gamertag, Player player) Parameters Type Name Description string gamertag The gamertag of the player to update. Player player The updated player information. Returns Type Description Task<Player> The updated player. Implements IPlayerService"
  },
  "Tournaments.Web.Services.RegistrationService.html": {
    "href": "Tournaments.Web.Services.RegistrationService.html",
    "title": "Class RegistrationService | Tournament Docs",
    "summary": "Class RegistrationService Implementation of the IRegistrationService interface. Inheritance object RegistrationService Implements IRegistrationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public class RegistrationService : IRegistrationService Constructors | Edit this page View Source RegistrationService(HttpClient) Initializes a new instance of the RegistrationService class. Declaration public RegistrationService(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. Methods | Edit this page View Source GetPlayersForTournamentHierarchyAsync(IEnumerable<Tournament>) Gets players for each tournament in a hierarchy. Declaration public Task<Dictionary<string, IEnumerable<Player>>> GetPlayersForTournamentHierarchyAsync(IEnumerable<Tournament> tournaments) Parameters Type Name Description IEnumerable<Tournament> tournaments The collection of tournaments. Returns Type Description Task<Dictionary<string, IEnumerable<Player>>> A dictionary mapping tournament names to their registered players. | Edit this page View Source GetPlayersInTournamentAsync(string) Gets all players registered in a tournament. Declaration public Task<IEnumerable<Player>> GetPlayersInTournamentAsync(string tournamentName) Parameters Type Name Description string tournamentName The name of the tournament. Returns Type Description Task<IEnumerable<Player>> A collection of players registered in the tournament. | Edit this page View Source GetRegistrationAsync(string, string) Gets a registration by tournament name and player gamertag. Declaration public Task<Registration> GetRegistrationAsync(string tournamentName, string playerGamertag) Parameters Type Name Description string tournamentName The name of the tournament. string playerGamertag The gamertag of the player. Returns Type Description Task<Registration> The registration. | Edit this page View Source GetTournamentsForPlayerAsync(string) Gets all tournaments a player is registered in. Declaration public Task<IEnumerable<Tournament>> GetTournamentsForPlayerAsync(string playerGamertag) Parameters Type Name Description string playerGamertag The gamertag of the player. Returns Type Description Task<IEnumerable<Tournament>> A collection of tournaments the player is registered in. | Edit this page View Source RegisterPlayerAsync(string, string) Registers a player in a tournament. Declaration public Task<Registration> RegisterPlayerAsync(string tournamentName, string playerGamertag) Parameters Type Name Description string tournamentName The name of the tournament. string playerGamertag The gamertag of the player. Returns Type Description Task<Registration> The created registration. | Edit this page View Source RemovePlayerFromTournamentAsync(string, string) Removes a player from a tournament. Declaration public Task RemovePlayerFromTournamentAsync(string tournamentName, string playerGamertag) Parameters Type Name Description string tournamentName The name of the tournament. string playerGamertag The gamertag of the player. Returns Type Description Task A task representing the asynchronous operation. Implements IRegistrationService"
  },
  "Tournaments.Web.Services.TournamentService.html": {
    "href": "Tournaments.Web.Services.TournamentService.html",
    "title": "Class TournamentService | Tournament Docs",
    "summary": "Class TournamentService Implementation of the ITournamentService interface. Inheritance object TournamentService Implements ITournamentService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Tournaments.Web.Services Assembly: Tournaments.Web.dll Syntax public class TournamentService : ITournamentService Constructors | Edit this page View Source TournamentService(HttpClient) Initializes a new instance of the TournamentService class. Declaration public TournamentService(HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HTTP client. Methods | Edit this page View Source CreateTournamentAsync(Tournament) Creates a new tournament. Declaration public Task<Tournament> CreateTournamentAsync(Tournament tournament) Parameters Type Name Description Tournament tournament The tournament to create. Returns Type Description Task<Tournament> The created tournament. | Edit this page View Source DeleteTournamentAsync(string) Deletes a tournament. Declaration public Task DeleteTournamentAsync(string name) Parameters Type Name Description string name The name of the tournament to delete. Returns Type Description Task A task representing the asynchronous operation. | Edit this page View Source GetAllTournamentsWithHierarchyAsync() Gets all root tournaments with their complete hierarchy of sub-tournaments. Declaration public Task<IEnumerable<Tournament>> GetAllTournamentsWithHierarchyAsync() Returns Type Description Task<IEnumerable<Tournament>> A collection of root tournaments with their sub-tournament hierarchies. | Edit this page View Source GetTournamentAsync(string, bool) Gets a tournament by name. Declaration public Task<Tournament> GetTournamentAsync(string name, bool includeSubTournaments = false) Parameters Type Name Description string name The name of the tournament. bool includeSubTournaments Whether to include sub-tournaments. Returns Type Description Task<Tournament> The tournament with the specified name. | Edit this page View Source GetTournamentsAsync() Gets all tournaments. Declaration public Task<IEnumerable<Tournament>> GetTournamentsAsync() Returns Type Description Task<IEnumerable<Tournament>> A collection of tournaments. | Edit this page View Source UpdateTournamentAsync(string, Tournament) Updates a tournament. Declaration public Task<Tournament> UpdateTournamentAsync(string name, Tournament tournament) Parameters Type Name Description string name The name of the tournament to update. Tournament tournament The updated tournament information. Returns Type Description Task<Tournament> The updated tournament. Implements ITournamentService"
  },
  "Tournaments.Web.Services.html": {
    "href": "Tournaments.Web.Services.html",
    "title": "Namespace Tournaments.Web.Services | Tournament Docs",
    "summary": "Namespace Tournaments.Web.Services Classes ApiStatusService Implementation of the IApiStatusService interface. PlayerService Implementation of the IPlayerService interface. RegistrationService Implementation of the IRegistrationService interface. TournamentService Implementation of the ITournamentService interface. Interfaces IApiStatusService Interface for API status-related operations. IPlayerService Interface for player-related operations. IRegistrationService Interface for registration-related operations. ITournamentService Interface for tournament-related operations."
  },
  "Tournaments.Web.html": {
    "href": "Tournaments.Web.html",
    "title": "Namespace Tournaments.Web | Tournament Docs",
    "summary": "Namespace Tournaments.Web Classes Program The main entry point for the Tournaments Web application."
  },
  "index.html": {
    "href": "index.html",
    "title": "Tournaments API Documentation | Tournament Docs",
    "summary": "Tournaments documentation Welcome to the documentation for Tournaments. API Documentation Tournaments.Api Tournaments.Web Tournaments.Shared.Models Tournaments.Shared.Hateoas Tournaments source code repo at GitHub"
  }
}